{"version":3,"sources":["_src/gameOfLife.js","_src/gameLibrary.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","createGrid","initialGrid","updateGridPosition","isCurrentGenValid","findNeighbours","isValidNeighbour","startGame","module","exports","nextGeneration","currGeneration","bounds","topLeft","bottomRight","breadth","length","grid","filterCurrGeneration","map","x","filter","updatedGrid","aliveGeneration","row","column","push","Array","fill","makeCellAlive","position","inputs","reduce","cell","array","neighbours","forEach","neighbour","doesElementExistInARange","element","upperLimit","upperLimit2","Math","min","max","isNeighbourAlive","_module$exports","Object","_home_travis_build_STEP_tw_gol_heerajoshi_gol_ui_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","bound","aliveCells","gridArray","slice","isValid","validNeighbours","isAlive","aliveNeighbours","Cell","react_default","a","createElement","width","height","this","props","color","col","y","stroke","strokeWidth","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5039bce4.chunk.js","sourcesContent":["const  { createGrid, initialGrid, updateGridPosition, isCurrentGenValid, findNeighbours, isValidNeighbour, startGame } = require('./gameLibrary.js');\n\nconst nextGeneration = function(currGeneration,bounds) {\n  let { topLeft,bottomRight } = bounds;\n  let breadth = bottomRight[0] - topLeft[0] + 1;\n  let length = bottomRight[1] - topLeft[1] + 1;\n\n  let grid = createGrid(length,breadth);\n  let newBound = {length, breadth}\n\n  let filterCurrGeneration = isCurrentGenValid(newBound);\n\n  currGeneration=  currGeneration.map((x)=> [x[0] - topLeft[0], x[1] - topLeft[1]]);\n  currGeneration= currGeneration.filter( filterCurrGeneration);\n\n  grid =  initialGrid(grid, currGeneration);\n  let updatedGrid = updateGridPosition(grid);\n  let aliveGeneration=[];\n  for(let row = 0; row < breadth; row++){\n    for(let column = 0; column < length; column++){\n      updatedGrid[row][column] == 1 && aliveGeneration.push([row,column]);\n    }\n  }\n  return aliveGeneration.map((x)=> [x[0] + topLeft[0], x[1] + topLeft[1]]);\n\n}\n\n\nmodule.exports = { nextGeneration };\n","const createGrid = function(length,breadth){\n  let  cells = new Array(breadth).fill(length);\n  return cells.map( x=> new Array(x).fill(0));\n}\n\nconst makeCellAlive = function(grid,position){\n  grid[position[0]][position[1]] = 1;\n  return grid;\n}\n\nconst initialGrid = function(grid,inputs){\n  return inputs.reduce(makeCellAlive,grid);\n}\n\nconst findNeighbours = function(cell){\n  let array = [-1,0,1]\n  let neighbours = [];\n  array.forEach((row)=>\n    array.forEach((column)=>{\n      neighbours.push([row+cell[0], column+cell[1]]);\n    }))\n  let result = neighbours.filter((position)=> !(position[0]==cell[0] && position[1] == cell[1]));\n  return result;\n}\n\nconst isValidNeighbour = function(grid){\n  return function(neighbour){\n    return doesElementExistInARange(neighbour, grid);\n  }\n}\n\nconst doesElementExistInARange = function(element, grid){\n  let lowerLimit = 0;\n  let upperLimit = grid.length;\n  let upperLimit2 = grid[0].length;\n\n  let lowestElement = Math.min(element[0], element[1]);\n  let greatestElement = Math.max(element[0], element[1]);\n  return (element[0] >= 0  && element[1] >= 0 && element[0] < upperLimit && element[1] < upperLimit2);\n}\n\n\nconst startGame = function(inputs){\n  let grid = createGrid(inputs.length,inputs.breadth);\n  let gridLength = grid.length;\n  let initializedGrid = initialGrid(grid,inputs.aliveCells);\n}\n\nconst isNeighbourAlive = function(grid){\n  return function(neighbour){\n    return grid[neighbour[0]][neighbour[1]] == 1;\n  }\n}\nconst isCurrentGenValid = function( bound){\n  let {length, breadth} = bound;\n  return function(position){\n    return   position[0] >= 0 && position[1] >= 0 && position[0] <breadth && position[1]  < length; \n  }\n}\n\nconst updateGridPosition = function(gridArray){\n  let updatedGrid = gridArray.map(x=> x.slice());\n  let length = gridArray.length;\n  let breadth = gridArray[0].length;\n  for(let row=0; row< length; row++){\n    for(let column = 0; column< breadth; column++){\n      let neighbours = findNeighbours([row,column]);\n      let isValid = isValidNeighbour(gridArray);\n      let validNeighbours = neighbours.filter(isValid);\n      let isAlive = isNeighbourAlive(gridArray);\n      let aliveNeighbours = validNeighbours.filter(isAlive).length;\n      if(aliveNeighbours == 3){  \n        updatedGrid[row][column] =1;\n      }\n      if(aliveNeighbours <2 || aliveNeighbours >3){\n        updatedGrid[row][column]=0;\n      }\n    }\n  }\n\n\n  return updatedGrid;\n}\n\n\n\n\nmodule.exports = { createGrid, initialGrid, findNeighbours, isValidNeighbour, isValidNeighbour,isCurrentGenValid ,startGame , updateGridPosition};\n\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}